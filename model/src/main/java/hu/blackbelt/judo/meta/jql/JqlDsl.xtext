grammar hu.blackbelt.judo.meta.jql.JqlDsl hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate jqldsl "http://www.blackbelt.hu/judo/meta/jql/JqlDsl"

Expression returns Expression:
	ConcatenateExpression;

ConcatenateExpression returns Expression:
	OrExpression (=>({BinaryOperation.leftOperand=current} operator=OpConcat) rightOperand=OrExpression)*;

OpConcat:
	'||';

OrExpression returns Expression:
	AndExpression (=>({BinaryOperation.leftOperand=current} operator=OpOr) rightOperand=AndExpression)*;

OpOr:
	'or' | 'OR';

AndExpression returns Expression:
	EqualityExpression (=>({BinaryOperation.leftOperand=current} operator=OpAnd) rightOperand=EqualityExpression)*;

OpAnd:
	'and' | 'AND';

EqualityExpression returns Expression:
	RelationalExpression (=>({BinaryOperation.leftOperand=current} operator=OpEquality)
	rightOperand=RelationalExpression)*;

OpEquality:
	'==' | '!=' ;

RelationalExpression returns Expression:
	AdditiveExpression
	(=>({BinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=AdditiveExpression)*;

OpCompare:
	'>=' | '<' '=' | '>' | '<' ;

AdditiveExpression returns Expression:
	MultiplicativeExpression (=>({BinaryOperation.leftOperand=current} operator=OpAdd)
	rightOperand=MultiplicativeExpression)*;

OpAdd:
	'+' | '-';

MultiplicativeExpression returns Expression:
	UnaryOperation (=>({BinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=UnaryOperation)*;

OpMulti:
	'*' | '/' | '%';

UnaryOperation returns Expression:
	{UnaryOperation} operator=OpUnary operand=UnaryOperation
	| PrimaryExpression;

OpUnary:
	"!" | 'not' | 'NOT' | "-" | "+";

ParenthesizedExpression returns Expression:
	'(' Expression ')';

PrimaryExpression returns Expression:
	NavigationExpression |
	Literal |
	ParenthesizedExpression;

Literal returns Expression:
	BooleanLiteral |
	NumberLiteral |
	StringLiteral;

BooleanLiteral returns Expression :
	{BooleanLiteral} ('false' | isTrue?='true');

NumberLiteral returns Expression :
	{IntegerLiteral} value=INTEGER |
    {DecimalLiteral} value=DECIMAL;

StringLiteral returns Expression:
	{StringLiteral} value=STRING;

NavigationExpression:
	base=NavigationBase (=>'.' features+=Feature)*;

Feature:
	name=ID;

NavigationBase:
	ValidID | QualifiedName;

QualifiedName:
	ID (=>'::' ID)+;

ValidID:
	ID;

terminal DECIMAL returns ecore::EBigDecimal: INTEGER '.' INTEGER;
terminal INTEGER returns ecore::EBigInteger: ('0'..'9')+;

terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal STRING:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
		;
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
