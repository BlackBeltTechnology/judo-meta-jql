/*
 * generated by Xtext 2.18.0
 */
grammar InternalJqlDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package hu.blackbelt.judo.meta.jql.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.blackbelt.judo.meta.jql.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import hu.blackbelt.judo.meta.jql.services.JqlDslGrammarAccess;

}
@parser::members {
	private JqlDslGrammarAccess grammarAccess;

	public void setGrammarAccess(JqlDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcatenateExpression
entryRuleConcatenateExpression
:
{ before(grammarAccess.getConcatenateExpressionRule()); }
	 ruleConcatenateExpression
{ after(grammarAccess.getConcatenateExpressionRule()); } 
	 EOF 
;

// Rule ConcatenateExpression
ruleConcatenateExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConcatenateExpressionAccess().getGroup()); }
		(rule__ConcatenateExpression__Group__0)
		{ after(grammarAccess.getConcatenateExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpConcat
entryRuleOpConcat
:
{ before(grammarAccess.getOpConcatRule()); }
	 ruleOpConcat
{ after(grammarAccess.getOpConcatRule()); } 
	 EOF 
;

// Rule OpConcat
ruleOpConcat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpConcatAccess().getVerticalLineVerticalLineKeyword()); }
		'||'
		{ after(grammarAccess.getOpConcatAccess().getVerticalLineVerticalLineKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpOr
entryRuleOpOr
:
{ before(grammarAccess.getOpOrRule()); }
	 ruleOpOr
{ after(grammarAccess.getOpOrRule()); } 
	 EOF 
;

// Rule OpOr
ruleOpOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpOrAccess().getAlternatives()); }
		(rule__OpOr__Alternatives)
		{ after(grammarAccess.getOpOrAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpAnd
entryRuleOpAnd
:
{ before(grammarAccess.getOpAndRule()); }
	 ruleOpAnd
{ after(grammarAccess.getOpAndRule()); } 
	 EOF 
;

// Rule OpAnd
ruleOpAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpAndAccess().getAlternatives()); }
		(rule__OpAnd__Alternatives)
		{ after(grammarAccess.getOpAndAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
		(rule__EqualityExpression__Group__0)
		{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpEquality
entryRuleOpEquality
:
{ before(grammarAccess.getOpEqualityRule()); }
	 ruleOpEquality
{ after(grammarAccess.getOpEqualityRule()); } 
	 EOF 
;

// Rule OpEquality
ruleOpEquality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpEqualityAccess().getAlternatives()); }
		(rule__OpEquality__Alternatives)
		{ after(grammarAccess.getOpEqualityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
		(rule__RelationalExpression__Group__0)
		{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpCompare
entryRuleOpCompare
:
{ before(grammarAccess.getOpCompareRule()); }
	 ruleOpCompare
{ after(grammarAccess.getOpCompareRule()); } 
	 EOF 
;

// Rule OpCompare
ruleOpCompare 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpCompareAccess().getAlternatives()); }
		(rule__OpCompare__Alternatives)
		{ after(grammarAccess.getOpCompareAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
		(rule__AdditiveExpression__Group__0)
		{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpAdd
entryRuleOpAdd
:
{ before(grammarAccess.getOpAddRule()); }
	 ruleOpAdd
{ after(grammarAccess.getOpAddRule()); } 
	 EOF 
;

// Rule OpAdd
ruleOpAdd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpAddAccess().getAlternatives()); }
		(rule__OpAdd__Alternatives)
		{ after(grammarAccess.getOpAddAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
		(rule__MultiplicativeExpression__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpMulti
entryRuleOpMulti
:
{ before(grammarAccess.getOpMultiRule()); }
	 ruleOpMulti
{ after(grammarAccess.getOpMultiRule()); } 
	 EOF 
;

// Rule OpMulti
ruleOpMulti 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpMultiAccess().getAlternatives()); }
		(rule__OpMulti__Alternatives)
		{ after(grammarAccess.getOpMultiAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation
:
{ before(grammarAccess.getUnaryOperationRule()); }
	 ruleUnaryOperation
{ after(grammarAccess.getUnaryOperationRule()); } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
		(rule__UnaryOperation__Alternatives)
		{ after(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpUnary
entryRuleOpUnary
:
{ before(grammarAccess.getOpUnaryRule()); }
	 ruleOpUnary
{ after(grammarAccess.getOpUnaryRule()); } 
	 EOF 
;

// Rule OpUnary
ruleOpUnary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpUnaryAccess().getAlternatives()); }
		(rule__OpUnary__Alternatives)
		{ after(grammarAccess.getOpUnaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
		(rule__ParenthesizedExpression__Group__0)
		{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLambdaExpression
entryRuleLambdaExpression
:
{ before(grammarAccess.getLambdaExpressionRule()); }
	 ruleLambdaExpression
{ after(grammarAccess.getLambdaExpressionRule()); } 
	 EOF 
;

// Rule LambdaExpression
ruleLambdaExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLambdaExpressionAccess().getGroup()); }
		(rule__LambdaExpression__Group__0)
		{ after(grammarAccess.getLambdaExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransformation
entryRuleTransformation
:
{ before(grammarAccess.getTransformationRule()); }
	 ruleTransformation
{ after(grammarAccess.getTransformationRule()); } 
	 EOF 
;

// Rule Transformation
ruleTransformation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransformationAccess().getGroup()); }
		(rule__Transformation__Group__0)
		{ after(grammarAccess.getTransformationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchExpression
entryRuleSwitchExpression
:
{ before(grammarAccess.getSwitchExpressionRule()); }
	 ruleSwitchExpression
{ after(grammarAccess.getSwitchExpressionRule()); } 
	 EOF 
;

// Rule SwitchExpression
ruleSwitchExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchExpressionAccess().getGroup()); }
		(rule__SwitchExpression__Group__0)
		{ after(grammarAccess.getSwitchExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchConditionalExpression
entryRuleSwitchConditionalExpression
:
{ before(grammarAccess.getSwitchConditionalExpressionRule()); }
	 ruleSwitchConditionalExpression
{ after(grammarAccess.getSwitchConditionalExpressionRule()); } 
	 EOF 
;

// Rule SwitchConditionalExpression
ruleSwitchConditionalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchConditionalExpressionAccess().getGroup()); }
		(rule__SwitchConditionalExpression__Group__0)
		{ after(grammarAccess.getSwitchConditionalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchConditionalCase
entryRuleSwitchConditionalCase
:
{ before(grammarAccess.getSwitchConditionalCaseRule()); }
	 ruleSwitchConditionalCase
{ after(grammarAccess.getSwitchConditionalCaseRule()); } 
	 EOF 
;

// Rule SwitchConditionalCase
ruleSwitchConditionalCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchConditionalCaseAccess().getGroup()); }
		(rule__SwitchConditionalCase__Group__0)
		{ after(grammarAccess.getSwitchConditionalCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchEqualsExpression
entryRuleSwitchEqualsExpression
:
{ before(grammarAccess.getSwitchEqualsExpressionRule()); }
	 ruleSwitchEqualsExpression
{ after(grammarAccess.getSwitchEqualsExpressionRule()); } 
	 EOF 
;

// Rule SwitchEqualsExpression
ruleSwitchEqualsExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchEqualsExpressionAccess().getGroup()); }
		(rule__SwitchEqualsExpression__Group__0)
		{ after(grammarAccess.getSwitchEqualsExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchEqualsCase
entryRuleSwitchEqualsCase
:
{ before(grammarAccess.getSwitchEqualsCaseRule()); }
	 ruleSwitchEqualsCase
{ after(grammarAccess.getSwitchEqualsCaseRule()); } 
	 EOF 
;

// Rule SwitchEqualsCase
ruleSwitchEqualsCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchEqualsCaseAccess().getGroup()); }
		(rule__SwitchEqualsCase__Group__0)
		{ after(grammarAccess.getSwitchEqualsCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getGroup()); }
		(rule__BooleanLiteral__Group__0)
		{ after(grammarAccess.getBooleanLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
		(rule__NumberLiteral__Alternatives)
		{ after(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getGroup()); }
		(rule__StringLiteral__Group__0)
		{ after(grammarAccess.getStringLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTemporalLiteral
entryRuleTemporalLiteral
:
{ before(grammarAccess.getTemporalLiteralRule()); }
	 ruleTemporalLiteral
{ after(grammarAccess.getTemporalLiteralRule()); } 
	 EOF 
;

// Rule TemporalLiteral
ruleTemporalLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTemporalLiteralAccess().getAlternatives()); }
		(rule__TemporalLiteral__Alternatives)
		{ after(grammarAccess.getTemporalLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMeasuredLiteral
entryRuleMeasuredLiteral
:
{ before(grammarAccess.getMeasuredLiteralRule()); }
	 ruleMeasuredLiteral
{ after(grammarAccess.getMeasuredLiteralRule()); } 
	 EOF 
;

// Rule MeasuredLiteral
ruleMeasuredLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMeasuredLiteralAccess().getGroup()); }
		(rule__MeasuredLiteral__Group__0)
		{ after(grammarAccess.getMeasuredLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumLiteral
entryRuleEnumLiteral
:
{ before(grammarAccess.getEnumLiteralRule()); }
	 ruleEnumLiteral
{ after(grammarAccess.getEnumLiteralRule()); } 
	 EOF 
;

// Rule EnumLiteral
ruleEnumLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumLiteralAccess().getGroup()); }
		(rule__EnumLiteral__Group__0)
		{ after(grammarAccess.getEnumLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNavigationExpression
entryRuleNavigationExpression
:
{ before(grammarAccess.getNavigationExpressionRule()); }
	 ruleNavigationExpression
{ after(grammarAccess.getNavigationExpressionRule()); } 
	 EOF 
;

// Rule NavigationExpression
ruleNavigationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNavigationExpressionAccess().getGroup()); }
		(rule__NavigationExpression__Group__0)
		{ after(grammarAccess.getNavigationExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeature
entryRuleFeature
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureAccess().getNameAssignment()); }
		(rule__Feature__NameAssignment)
		{ after(grammarAccess.getFeatureAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNavigationBase
entryRuleNavigationBase
:
{ before(grammarAccess.getNavigationBaseRule()); }
	 ruleNavigationBase
{ after(grammarAccess.getNavigationBaseRule()); } 
	 EOF 
;

// Rule NavigationBase
ruleNavigationBase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNavigationBaseAccess().getAlternatives()); }
		(rule__NavigationBase__Alternatives)
		{ after(grammarAccess.getNavigationBaseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValidID
entryRuleValidID
:
{ before(grammarAccess.getValidIDRule()); }
	 ruleValidID
{ after(grammarAccess.getValidIDRule()); } 
	 EOF 
;

// Rule ValidID
ruleValidID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getConcatenateExpressionParserRuleCall_0()); }
		ruleConcatenateExpression
		{ after(grammarAccess.getExpressionAccess().getConcatenateExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getSwitchExpressionParserRuleCall_1()); }
		ruleSwitchExpression
		{ after(grammarAccess.getExpressionAccess().getSwitchExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpOrAccess().getOrKeyword_0()); }
		'or'
		{ after(grammarAccess.getOpOrAccess().getOrKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpOrAccess().getORKeyword_1()); }
		'OR'
		{ after(grammarAccess.getOpOrAccess().getORKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpAnd__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpAndAccess().getAndKeyword_0()); }
		'and'
		{ after(grammarAccess.getOpAndAccess().getAndKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpAndAccess().getANDKeyword_1()); }
		'AND'
		{ after(grammarAccess.getOpAndAccess().getANDKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpEquality__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); }
		'=='
		{ after(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); }
		'!='
		{ after(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpCompare__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); }
		'>='
		{ after(grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpCompareAccess().getGroup_1()); }
		(rule__OpCompare__Group_1__0)
		{ after(grammarAccess.getOpCompareAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); }
		'>'
		{ after(grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); }
		'<'
		{ after(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpAdd__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpMulti__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); }
		'*'
		{ after(grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpMultiAccess().getSolidusKeyword_1()); }
		'/'
		{ after(grammarAccess.getOpMultiAccess().getSolidusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOpMultiAccess().getPercentSignKeyword_2()); }
		'%'
		{ after(grammarAccess.getOpMultiAccess().getPercentSignKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperationAccess().getGroup_0()); }
		(rule__UnaryOperation__Group_0__0)
		{ after(grammarAccess.getUnaryOperationAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperationAccess().getPrimaryExpressionParserRuleCall_1()); }
		rulePrimaryExpression
		{ after(grammarAccess.getUnaryOperationAccess().getPrimaryExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpUnary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); }
		'!'
		{ after(grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpUnaryAccess().getNotKeyword_1()); }
		'not'
		{ after(grammarAccess.getOpUnaryAccess().getNotKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOpUnaryAccess().getNOTKeyword_2()); }
		'NOT'
		{ after(grammarAccess.getOpUnaryAccess().getNOTKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_3()); }
		'-'
		{ after(grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getOpUnaryAccess().getPlusSignKeyword_4()); }
		'+'
		{ after(grammarAccess.getOpUnaryAccess().getPlusSignKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_0()); }
		ruleParenthesizedExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getNavigationExpressionParserRuleCall_1()); }
		ruleNavigationExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getNavigationExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_2()); }
		ruleLiteral
		{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Alternatives_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformationAccess().getLambdaAssignment_2_1_0()); }
		(rule__Transformation__LambdaAssignment_2_1_0)
		{ after(grammarAccess.getTransformationAccess().getLambdaAssignment_2_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getTransformationAccess().getGroup_2_1_1()); }
		(rule__Transformation__Group_2_1_1__0)
		{ after(grammarAccess.getTransformationAccess().getGroup_2_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__BodyAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchExpressionAccess().getBodySwitchConditionalExpressionParserRuleCall_3_0_0()); }
		ruleSwitchConditionalExpression
		{ after(grammarAccess.getSwitchExpressionAccess().getBodySwitchConditionalExpressionParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSwitchExpressionAccess().getBodySwitchEqualsExpressionParserRuleCall_3_0_1()); }
		ruleSwitchEqualsExpression
		{ after(grammarAccess.getSwitchExpressionAccess().getBodySwitchEqualsExpressionParserRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_1()); }
		ruleNumberLiteral
		{ after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
		ruleStringLiteral
		{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getTemporalLiteralParserRuleCall_3()); }
		ruleTemporalLiteral
		{ after(grammarAccess.getLiteralAccess().getTemporalLiteralParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getEnumLiteralParserRuleCall_4()); }
		ruleEnumLiteral
		{ after(grammarAccess.getLiteralAccess().getEnumLiteralParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getMeasuredLiteralParserRuleCall_5()); }
		ruleMeasuredLiteral
		{ after(grammarAccess.getLiteralAccess().getMeasuredLiteralParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0()); }
		'false'
		{ after(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1()); }
		(rule__BooleanLiteral__IsTrueAssignment_1_1)
		{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getGroup_0()); }
		(rule__NumberLiteral__Group_0__0)
		{ after(grammarAccess.getNumberLiteralAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberLiteralAccess().getGroup_1()); }
		(rule__NumberLiteral__Group_1__0)
		{ after(grammarAccess.getNumberLiteralAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalLiteralAccess().getGroup_0()); }
		(rule__TemporalLiteral__Group_0__0)
		{ after(grammarAccess.getTemporalLiteralAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTemporalLiteralAccess().getGroup_1()); }
		(rule__TemporalLiteral__Group_1__0)
		{ after(grammarAccess.getTemporalLiteralAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationBase__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationBaseAccess().getValidIDParserRuleCall_0()); }
		ruleValidID
		{ after(grammarAccess.getNavigationBaseAccess().getValidIDParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNavigationBaseAccess().getQualifiedNameParserRuleCall_1()); }
		ruleQualifiedName
		{ after(grammarAccess.getNavigationBaseAccess().getQualifiedNameParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcatenateExpression__Group__0__Impl
	rule__ConcatenateExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateExpressionAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
	{ after(grammarAccess.getConcatenateExpressionAccess().getOrExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcatenateExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateExpressionAccess().getGroup_1()); }
	(rule__ConcatenateExpression__Group_1__0)*
	{ after(grammarAccess.getConcatenateExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatenateExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcatenateExpression__Group_1__0__Impl
	rule__ConcatenateExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateExpressionAccess().getGroup_1_0()); }
	(rule__ConcatenateExpression__Group_1_0__0)
	{ after(grammarAccess.getConcatenateExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcatenateExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateExpressionAccess().getRightOperandAssignment_1_1()); }
	(rule__ConcatenateExpression__RightOperandAssignment_1_1)
	{ after(grammarAccess.getConcatenateExpressionAccess().getRightOperandAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatenateExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcatenateExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateExpressionAccess().getGroup_1_0_0()); }
	(rule__ConcatenateExpression__Group_1_0_0__0)
	{ after(grammarAccess.getConcatenateExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatenateExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcatenateExpression__Group_1_0_0__0__Impl
	rule__ConcatenateExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getConcatenateExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcatenateExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateExpressionAccess().getOperatorAssignment_1_0_0_1()); }
	(rule__ConcatenateExpression__OperatorAssignment_1_0_0_1)
	{ after(grammarAccess.getConcatenateExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
	(rule__OrExpression__Group_1_0__0)
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightOperandAssignment_1_1()); }
	(rule__OrExpression__RightOperandAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getRightOperandAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1_0_0()); }
	(rule__OrExpression__Group_1_0_0__0)
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1_0_0__0__Impl
	rule__OrExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_0_0_1()); }
	(rule__OrExpression__OperatorAssignment_1_0_0_1)
	{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
	{ after(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
	(rule__AndExpression__Group_1_0__0)
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightOperandAssignment_1_1()); }
	(rule__AndExpression__RightOperandAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getRightOperandAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
	(rule__AndExpression__Group_1_0_0__0)
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1_0_0__0__Impl
	rule__AndExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_0_0_1()); }
	(rule__AndExpression__OperatorAssignment_1_0_0_1)
	{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
	{ after(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
	(rule__EqualityExpression__Group_1__0)*
	{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1_0()); }
	(rule__EqualityExpression__Group_1_0__0)
	{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getRightOperandAssignment_1_1()); }
	(rule__EqualityExpression__RightOperandAssignment_1_1)
	{ after(grammarAccess.getEqualityExpressionAccess().getRightOperandAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1_0_0()); }
	(rule__EqualityExpression__Group_1_0_0__0)
	{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1_0_0__0__Impl
	rule__EqualityExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getEqualityExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_0_0_1()); }
	(rule__EqualityExpression__OperatorAssignment_1_0_0_1)
	{ after(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
	{ after(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
	(rule__RelationalExpression__Group_1__0)*
	{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
	(rule__RelationalExpression__Group_1_0__0)
	{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getRightOperandAssignment_1_1()); }
	(rule__RelationalExpression__RightOperandAssignment_1_1)
	{ after(grammarAccess.getRelationalExpressionAccess().getRightOperandAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
	(rule__RelationalExpression__Group_1_0_0__0)
	{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1_0_0__0__Impl
	rule__RelationalExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getRelationalExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_0_1()); }
	(rule__RelationalExpression__OperatorAssignment_1_0_0_1)
	{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OpCompare__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpCompare__Group_1__0__Impl
	rule__OpCompare__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpCompare__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0()); }
	'<'
	{ after(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpCompare__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpCompare__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpCompare__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1()); }
	'='
	{ after(grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
	{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
	(rule__AdditiveExpression__Group_1__0)*
	{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
	(rule__AdditiveExpression__Group_1_0__0)
	{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getRightOperandAssignment_1_1()); }
	(rule__AdditiveExpression__RightOperandAssignment_1_1)
	{ after(grammarAccess.getAdditiveExpressionAccess().getRightOperandAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_0()); }
	(rule__AdditiveExpression__Group_1_0_0__0)
	{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1_0_0__0__Impl
	rule__AdditiveExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAdditiveExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_0_0_1()); }
	(rule__AdditiveExpression__OperatorAssignment_1_0_0_1)
	{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOperationParserRuleCall_0()); }
	ruleUnaryOperation
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOperationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__1__Impl
	rule__MultiplicativeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
	(rule__MultiplicativeExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2()); }
	(rule__MultiplicativeExpression__Group_2__0)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getExclamationMarkKeyword_1_0()); }
	('!')
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getExclamationMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getTransformationsAssignment_1_1()); }
	(rule__MultiplicativeExpression__TransformationsAssignment_1_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getTransformationsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_2__0__Impl
	rule__MultiplicativeExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_0()); }
	(rule__MultiplicativeExpression__Group_2_0__0)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandAssignment_2_1()); }
	(rule__MultiplicativeExpression__RightOperandAssignment_2_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_2_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_0_0()); }
	(rule__MultiplicativeExpression__Group_2_0_0__0)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_2_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_2_0_0__0__Impl
	rule__MultiplicativeExpression__Group_2_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftOperandAction_2_0_0_0()); }
	()
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftOperandAction_2_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_2_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_2_0_0_1()); }
	(rule__MultiplicativeExpression__OperatorAssignment_2_0_0_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_2_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryOperation__Group_0__0__Impl
	rule__UnaryOperation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0()); }
	()
	{ after(grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryOperation__Group_0__1__Impl
	rule__UnaryOperation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0_1()); }
	(rule__UnaryOperation__OperatorAssignment_0_1)
	{ after(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryOperation__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryOperationAccess().getOperandAssignment_0_2()); }
	(rule__UnaryOperation__OperandAssignment_0_2)
	{ after(grammarAccess.getUnaryOperationAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
	{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LambdaExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__0__Impl
	rule__LambdaExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getLambdaExpressionAction_0()); }
	()
	{ after(grammarAccess.getLambdaExpressionAccess().getLambdaExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__1__Impl
	rule__LambdaExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getArgumentAssignment_1()); }
	(rule__LambdaExpression__ArgumentAssignment_1)
	{ after(grammarAccess.getLambdaExpressionAccess().getArgumentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__2__Impl
	rule__LambdaExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getVerticalLineKeyword_2()); }
	'|'
	{ after(grammarAccess.getLambdaExpressionAccess().getVerticalLineKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getStatementAssignment_3()); }
	(rule__LambdaExpression__StatementAssignment_3)
	{ after(grammarAccess.getLambdaExpressionAccess().getStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transformation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group__0__Impl
	rule__Transformation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getTransformationAction_0()); }
	()
	{ after(grammarAccess.getTransformationAccess().getTransformationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group__1__Impl
	rule__Transformation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getFeatureAssignment_1()); }
	(rule__Transformation__FeatureAssignment_1)
	{ after(grammarAccess.getTransformationAccess().getFeatureAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getGroup_2()); }
	(rule__Transformation__Group_2__0)?
	{ after(grammarAccess.getTransformationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transformation__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group_2__0__Impl
	rule__Transformation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getTransformationAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group_2__1__Impl
	rule__Transformation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getAlternatives_2_1()); }
	(rule__Transformation__Alternatives_2_1)
	{ after(grammarAccess.getTransformationAccess().getAlternatives_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getTransformationAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transformation__Group_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group_2_1_1__0__Impl
	rule__Transformation__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getParametersAssignment_2_1_1_0()); }
	(rule__Transformation__ParametersAssignment_2_1_1_0)?
	{ after(grammarAccess.getTransformationAccess().getParametersAssignment_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group_2_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group_2_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getGroup_2_1_1_1()); }
	(rule__Transformation__Group_2_1_1_1__0)*
	{ after(grammarAccess.getTransformationAccess().getGroup_2_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transformation__Group_2_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group_2_1_1_1__0__Impl
	rule__Transformation__Group_2_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group_2_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getCommaKeyword_2_1_1_1_0()); }
	','
	{ after(grammarAccess.getTransformationAccess().getCommaKeyword_2_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group_2_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transformation__Group_2_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Group_2_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformationAccess().getParametersAssignment_2_1_1_1_1()); }
	(rule__Transformation__ParametersAssignment_2_1_1_1_1)
	{ after(grammarAccess.getTransformationAccess().getParametersAssignment_2_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchExpression__Group__0__Impl
	rule__SwitchExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchExpressionAccess().getSwitchExpressionAction_0()); }
	()
	{ after(grammarAccess.getSwitchExpressionAccess().getSwitchExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchExpression__Group__1__Impl
	rule__SwitchExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchExpressionAccess().getCASEKeyword_1()); }
	'CASE'
	{ after(grammarAccess.getSwitchExpressionAccess().getCASEKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchExpression__Group__2__Impl
	rule__SwitchExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchExpressionAccess().getOperandAssignment_2()); }
	(rule__SwitchExpression__OperandAssignment_2)
	{ after(grammarAccess.getSwitchExpressionAccess().getOperandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchExpressionAccess().getBodyAssignment_3()); }
	(rule__SwitchExpression__BodyAssignment_3)
	{ after(grammarAccess.getSwitchExpressionAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchConditionalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalExpression__Group__0__Impl
	rule__SwitchConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalExpressionAccess().getSwitchConditionalExpressionAction_0()); }
	()
	{ after(grammarAccess.getSwitchConditionalExpressionAccess().getSwitchConditionalExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalExpression__Group__1__Impl
	rule__SwitchConditionalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalExpressionAccess().getASKeyword_1()); }
	'AS'
	{ after(grammarAccess.getSwitchConditionalExpressionAccess().getASKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalExpression__Group__2__Impl
	rule__SwitchConditionalExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalExpressionAccess().getAliasAssignment_2()); }
	(rule__SwitchConditionalExpression__AliasAssignment_2)
	{ after(grammarAccess.getSwitchConditionalExpressionAccess().getAliasAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalExpression__Group__3__Impl
	rule__SwitchConditionalExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalExpressionAccess().getGroup_3()); }
	(rule__SwitchConditionalExpression__Group_3__0)*
	{ after(grammarAccess.getSwitchConditionalExpressionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalExpressionAccess().getGroup_4()); }
	(rule__SwitchConditionalExpression__Group_4__0)?
	{ after(grammarAccess.getSwitchConditionalExpressionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchConditionalExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalExpression__Group_3__0__Impl
	rule__SwitchConditionalExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalExpressionAccess().getWHENKeyword_3_0()); }
	('WHEN')
	{ after(grammarAccess.getSwitchConditionalExpressionAccess().getWHENKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalExpressionAccess().getCasesAssignment_3_1()); }
	(rule__SwitchConditionalExpression__CasesAssignment_3_1)
	{ after(grammarAccess.getSwitchConditionalExpressionAccess().getCasesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchConditionalExpression__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalExpression__Group_4__0__Impl
	rule__SwitchConditionalExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalExpressionAccess().getELSEKeyword_4_0()); }
	('ELSE')
	{ after(grammarAccess.getSwitchConditionalExpressionAccess().getELSEKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalExpressionAccess().getDefaultAssignment_4_1()); }
	(rule__SwitchConditionalExpression__DefaultAssignment_4_1)
	{ after(grammarAccess.getSwitchConditionalExpressionAccess().getDefaultAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchConditionalCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalCase__Group__0__Impl
	rule__SwitchConditionalCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalCaseAccess().getSwitchConditionalCaseAction_0()); }
	()
	{ after(grammarAccess.getSwitchConditionalCaseAccess().getSwitchConditionalCaseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalCase__Group__1__Impl
	rule__SwitchConditionalCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalCaseAccess().getConditionAssignment_1()); }
	(rule__SwitchConditionalCase__ConditionAssignment_1)
	{ after(grammarAccess.getSwitchConditionalCaseAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalCase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalCase__Group__2__Impl
	rule__SwitchConditionalCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalCase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalCaseAccess().getTHENKeyword_2()); }
	'THEN'
	{ after(grammarAccess.getSwitchConditionalCaseAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalCase__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchConditionalCase__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalCase__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchConditionalCaseAccess().getResultAssignment_3()); }
	(rule__SwitchConditionalCase__ResultAssignment_3)
	{ after(grammarAccess.getSwitchConditionalCaseAccess().getResultAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchEqualsExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchEqualsExpression__Group__0__Impl
	rule__SwitchEqualsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchEqualsExpressionAccess().getSwitchEqualsExpressionAction_0()); }
	()
	{ after(grammarAccess.getSwitchEqualsExpressionAccess().getSwitchEqualsExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchEqualsExpression__Group__1__Impl
	rule__SwitchEqualsExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchEqualsExpressionAccess().getGroup_1()); }
	(rule__SwitchEqualsExpression__Group_1__0)*
	{ after(grammarAccess.getSwitchEqualsExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchEqualsExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchEqualsExpressionAccess().getGroup_2()); }
	(rule__SwitchEqualsExpression__Group_2__0)?
	{ after(grammarAccess.getSwitchEqualsExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchEqualsExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchEqualsExpression__Group_1__0__Impl
	rule__SwitchEqualsExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchEqualsExpressionAccess().getWHENKeyword_1_0()); }
	('WHEN')
	{ after(grammarAccess.getSwitchEqualsExpressionAccess().getWHENKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchEqualsExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchEqualsExpressionAccess().getCasesAssignment_1_1()); }
	(rule__SwitchEqualsExpression__CasesAssignment_1_1)
	{ after(grammarAccess.getSwitchEqualsExpressionAccess().getCasesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchEqualsExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchEqualsExpression__Group_2__0__Impl
	rule__SwitchEqualsExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchEqualsExpressionAccess().getELSEKeyword_2_0()); }
	('ELSE')
	{ after(grammarAccess.getSwitchEqualsExpressionAccess().getELSEKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchEqualsExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchEqualsExpressionAccess().getDefaultAssignment_2_1()); }
	(rule__SwitchEqualsExpression__DefaultAssignment_2_1)
	{ after(grammarAccess.getSwitchEqualsExpressionAccess().getDefaultAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchEqualsCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchEqualsCase__Group__0__Impl
	rule__SwitchEqualsCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchEqualsCaseAccess().getSwitchEqualsCaseAction_0()); }
	()
	{ after(grammarAccess.getSwitchEqualsCaseAccess().getSwitchEqualsCaseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchEqualsCase__Group__1__Impl
	rule__SwitchEqualsCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchEqualsCaseAccess().getConditionAssignment_1()); }
	(rule__SwitchEqualsCase__ConditionAssignment_1)
	{ after(grammarAccess.getSwitchEqualsCaseAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsCase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchEqualsCase__Group__2__Impl
	rule__SwitchEqualsCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsCase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchEqualsCaseAccess().getTHENKeyword_2()); }
	'THEN'
	{ after(grammarAccess.getSwitchEqualsCaseAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsCase__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchEqualsCase__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsCase__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchEqualsCaseAccess().getResultAssignment_3()); }
	(rule__SwitchEqualsCase__ResultAssignment_3)
	{ after(grammarAccess.getSwitchEqualsCaseAccess().getResultAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanLiteral__Group__0__Impl
	rule__BooleanLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
	()
	{ after(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
	(rule__BooleanLiteral__Alternatives_1)
	{ after(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberLiteral__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group_0__0__Impl
	rule__NumberLiteral__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getIntegerLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getNumberLiteralAccess().getIntegerLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment_0_1()); }
	(rule__NumberLiteral__ValueAssignment_0_1)
	{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberLiteral__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group_1__0__Impl
	rule__NumberLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getDecimalLiteralAction_1_0()); }
	()
	{ after(grammarAccess.getNumberLiteralAccess().getDecimalLiteralAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment_1_1()); }
	(rule__NumberLiteral__ValueAssignment_1_1)
	{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringLiteral__Group__0__Impl
	rule__StringLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
	()
	{ after(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
	(rule__StringLiteral__ValueAssignment_1)
	{ after(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalLiteral__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalLiteral__Group_0__0__Impl
	rule__TemporalLiteral__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalLiteral__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalLiteralAccess().getDateLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getTemporalLiteralAccess().getDateLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalLiteral__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalLiteral__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalLiteral__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalLiteralAccess().getValueAssignment_0_1()); }
	(rule__TemporalLiteral__ValueAssignment_0_1)
	{ after(grammarAccess.getTemporalLiteralAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalLiteral__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalLiteral__Group_1__0__Impl
	rule__TemporalLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalLiteral__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalLiteralAccess().getTimeStampLiteralAction_1_0()); }
	()
	{ after(grammarAccess.getTemporalLiteralAccess().getTimeStampLiteralAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalLiteral__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemporalLiteral__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalLiteral__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemporalLiteralAccess().getValueAssignment_1_1()); }
	(rule__TemporalLiteral__ValueAssignment_1_1)
	{ after(grammarAccess.getTemporalLiteralAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MeasuredLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MeasuredLiteral__Group__0__Impl
	rule__MeasuredLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasuredLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeasuredLiteralAccess().getMeasuredLiteralAction_0()); }
	()
	{ after(grammarAccess.getMeasuredLiteralAccess().getMeasuredLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasuredLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MeasuredLiteral__Group__1__Impl
	rule__MeasuredLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasuredLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeasuredLiteralAccess().getValueAssignment_1()); }
	(rule__MeasuredLiteral__ValueAssignment_1)
	{ after(grammarAccess.getMeasuredLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasuredLiteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MeasuredLiteral__Group__2__Impl
	rule__MeasuredLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasuredLiteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeasuredLiteralAccess().getLeftSquareBracketKeyword_2()); }
	'['
	{ after(grammarAccess.getMeasuredLiteralAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasuredLiteral__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MeasuredLiteral__Group__3__Impl
	rule__MeasuredLiteral__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasuredLiteral__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeasuredLiteralAccess().getMeasureAssignment_3()); }
	(rule__MeasuredLiteral__MeasureAssignment_3)
	{ after(grammarAccess.getMeasuredLiteralAccess().getMeasureAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasuredLiteral__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MeasuredLiteral__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasuredLiteral__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeasuredLiteralAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getMeasuredLiteralAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumLiteral__Group__0__Impl
	rule__EnumLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumLiteralAccess().getEnumLiteralAction_0()); }
	()
	{ after(grammarAccess.getEnumLiteralAccess().getEnumLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumLiteral__Group__1__Impl
	rule__EnumLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumLiteralAccess().getGraveAccentKeyword_1()); }
	'`'
	{ after(grammarAccess.getEnumLiteralAccess().getGraveAccentKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumLiteral__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumLiteralAccess().getValueAssignment_2()); }
	(rule__EnumLiteral__ValueAssignment_2)
	{ after(grammarAccess.getEnumLiteralAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NavigationExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavigationExpression__Group__0__Impl
	rule__NavigationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigationExpressionAccess().getBaseAssignment_0()); }
	(rule__NavigationExpression__BaseAssignment_0)
	{ after(grammarAccess.getNavigationExpressionAccess().getBaseAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavigationExpression__Group__1__Impl
	rule__NavigationExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigationExpressionAccess().getGroup_1()); }
	(rule__NavigationExpression__Group_1__0)*
	{ after(grammarAccess.getNavigationExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavigationExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigationExpressionAccess().getGroup_2()); }
	(rule__NavigationExpression__Group_2__0)?
	{ after(grammarAccess.getNavigationExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NavigationExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavigationExpression__Group_1__0__Impl
	rule__NavigationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigationExpressionAccess().getFullStopKeyword_1_0()); }
	('.')
	{ after(grammarAccess.getNavigationExpressionAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavigationExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigationExpressionAccess().getFeaturesAssignment_1_1()); }
	(rule__NavigationExpression__FeaturesAssignment_1_1)
	{ after(grammarAccess.getNavigationExpressionAccess().getFeaturesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NavigationExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavigationExpression__Group_2__0__Impl
	rule__NavigationExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigationExpressionAccess().getCommercialAtKeyword_2_0()); }
	'@'
	{ after(grammarAccess.getNavigationExpressionAccess().getCommercialAtKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavigationExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavigationExpressionAccess().getCastAssignment_2_1()); }
	(rule__NavigationExpression__CastAssignment_2_1)
	{ after(grammarAccess.getNavigationExpressionAccess().getCastAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
		(rule__QualifiedName__Group_1__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	)
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
		(rule__QualifiedName__Group_1__0)*
		{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getColonColonKeyword_1_0()); }
	('::')
	{ after(grammarAccess.getQualifiedNameAccess().getColonColonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatenateExpression__OperatorAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcatenateExpressionAccess().getOperatorOpConcatParserRuleCall_1_0_0_1_0()); }
		ruleOpConcat
		{ after(grammarAccess.getConcatenateExpressionAccess().getOperatorOpConcatParserRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatenateExpression__RightOperandAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcatenateExpressionAccess().getRightOperandOrExpressionParserRuleCall_1_1_0()); }
		ruleOrExpression
		{ after(grammarAccess.getConcatenateExpressionAccess().getRightOperandOrExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOperatorOpOrParserRuleCall_1_0_0_1_0()); }
		ruleOpOr
		{ after(grammarAccess.getOrExpressionAccess().getOperatorOpOrParserRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightOperandAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightOperandAndExpressionParserRuleCall_1_1_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightOperandAndExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOperatorOpAndParserRuleCall_1_0_0_1_0()); }
		ruleOpAnd
		{ after(grammarAccess.getAndExpressionAccess().getOperatorOpAndParserRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightOperandAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightOperandEqualityExpressionParserRuleCall_1_1_0()); }
		ruleEqualityExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightOperandEqualityExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperatorAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getOperatorOpEqualityParserRuleCall_1_0_0_1_0()); }
		ruleOpEquality
		{ after(grammarAccess.getEqualityExpressionAccess().getOperatorOpEqualityParserRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightOperandAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getRightOperandRelationalExpressionParserRuleCall_1_1_0()); }
		ruleRelationalExpression
		{ after(grammarAccess.getEqualityExpressionAccess().getRightOperandRelationalExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getOperatorOpCompareParserRuleCall_1_0_0_1_0()); }
		ruleOpCompare
		{ after(grammarAccess.getRelationalExpressionAccess().getOperatorOpCompareParserRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightOperandAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getRightOperandAdditiveExpressionParserRuleCall_1_1_0()); }
		ruleAdditiveExpression
		{ after(grammarAccess.getRelationalExpressionAccess().getRightOperandAdditiveExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperatorAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorOpAddParserRuleCall_1_0_0_1_0()); }
		ruleOpAdd
		{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorOpAddParserRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightOperandAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getRightOperandMultiplicativeExpressionParserRuleCall_1_1_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getAdditiveExpressionAccess().getRightOperandMultiplicativeExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__TransformationsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getTransformationsTransformationParserRuleCall_1_1_0()); }
		ruleTransformation
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getTransformationsTransformationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperatorAssignment_2_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorOpMultiParserRuleCall_2_0_0_1_0()); }
		ruleOpMulti
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorOpMultiParserRuleCall_2_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightOperandAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandUnaryOperationParserRuleCall_2_1_0()); }
		ruleUnaryOperation
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandUnaryOperationParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperatorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperationAccess().getOperatorOpUnaryParserRuleCall_0_1_0()); }
		ruleOpUnary
		{ after(grammarAccess.getUnaryOperationAccess().getOperatorOpUnaryParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperationAccess().getOperandUnaryOperationParserRuleCall_0_2_0()); }
		ruleUnaryOperation
		{ after(grammarAccess.getUnaryOperationAccess().getOperandUnaryOperationParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__ArgumentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaExpressionAccess().getArgumentFeatureParserRuleCall_1_0()); }
		ruleFeature
		{ after(grammarAccess.getLambdaExpressionAccess().getArgumentFeatureParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__StatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaExpressionAccess().getStatementExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getLambdaExpressionAccess().getStatementExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__FeatureAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformationAccess().getFeatureFeatureParserRuleCall_1_0()); }
		ruleFeature
		{ after(grammarAccess.getTransformationAccess().getFeatureFeatureParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__LambdaAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformationAccess().getLambdaLambdaExpressionParserRuleCall_2_1_0_0()); }
		ruleLambdaExpression
		{ after(grammarAccess.getTransformationAccess().getLambdaLambdaExpressionParserRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__ParametersAssignment_2_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformationAccess().getParametersExpressionParserRuleCall_2_1_1_0_0()); }
		ruleExpression
		{ after(grammarAccess.getTransformationAccess().getParametersExpressionParserRuleCall_2_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__ParametersAssignment_2_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformationAccess().getParametersExpressionParserRuleCall_2_1_1_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getTransformationAccess().getParametersExpressionParserRuleCall_2_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__OperandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchExpressionAccess().getOperandConcatenateExpressionParserRuleCall_2_0()); }
		ruleConcatenateExpression
		{ after(grammarAccess.getSwitchExpressionAccess().getOperandConcatenateExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchExpressionAccess().getBodyAlternatives_3_0()); }
		(rule__SwitchExpression__BodyAlternatives_3_0)
		{ after(grammarAccess.getSwitchExpressionAccess().getBodyAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__AliasAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchConditionalExpressionAccess().getAliasFeatureParserRuleCall_2_0()); }
		ruleFeature
		{ after(grammarAccess.getSwitchConditionalExpressionAccess().getAliasFeatureParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__CasesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchConditionalExpressionAccess().getCasesSwitchConditionalCaseParserRuleCall_3_1_0()); }
		ruleSwitchConditionalCase
		{ after(grammarAccess.getSwitchConditionalExpressionAccess().getCasesSwitchConditionalCaseParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalExpression__DefaultAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchConditionalExpressionAccess().getDefaultExpressionParserRuleCall_4_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSwitchConditionalExpressionAccess().getDefaultExpressionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalCase__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchConditionalCaseAccess().getConditionRelationalExpressionParserRuleCall_1_0()); }
		ruleRelationalExpression
		{ after(grammarAccess.getSwitchConditionalCaseAccess().getConditionRelationalExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchConditionalCase__ResultAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchConditionalCaseAccess().getResultExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getSwitchConditionalCaseAccess().getResultExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__CasesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchEqualsExpressionAccess().getCasesSwitchEqualsCaseParserRuleCall_1_1_0()); }
		ruleSwitchEqualsCase
		{ after(grammarAccess.getSwitchEqualsExpressionAccess().getCasesSwitchEqualsCaseParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsExpression__DefaultAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchEqualsExpressionAccess().getDefaultExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSwitchEqualsExpressionAccess().getDefaultExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsCase__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchEqualsCaseAccess().getConditionLiteralParserRuleCall_1_0()); }
		ruleLiteral
		{ after(grammarAccess.getSwitchEqualsCaseAccess().getConditionLiteralParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchEqualsCase__ResultAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchEqualsCaseAccess().getResultExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getSwitchEqualsCaseAccess().getResultExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__IsTrueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
			'true'
			{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueINTEGERTerminalRuleCall_0_1_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getNumberLiteralAccess().getValueINTEGERTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueDECIMALTerminalRuleCall_1_1_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getNumberLiteralAccess().getValueDECIMALTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalLiteral__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalLiteralAccess().getValueDATETerminalRuleCall_0_1_0()); }
		RULE_DATE
		{ after(grammarAccess.getTemporalLiteralAccess().getValueDATETerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalLiteral__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemporalLiteralAccess().getValueTIMESTAMPTerminalRuleCall_1_1_0()); }
		RULE_TIMESTAMP
		{ after(grammarAccess.getTemporalLiteralAccess().getValueTIMESTAMPTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasuredLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMeasuredLiteralAccess().getValueNumberLiteralParserRuleCall_1_0()); }
		ruleNumberLiteral
		{ after(grammarAccess.getMeasuredLiteralAccess().getValueNumberLiteralParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasuredLiteral__MeasureAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMeasuredLiteralAccess().getMeasureQualifiedNameParserRuleCall_3_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getMeasuredLiteralAccess().getMeasureQualifiedNameParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumLiteralAccess().getValueQualifiedNameParserRuleCall_2_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getEnumLiteralAccess().getValueQualifiedNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__BaseAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationExpressionAccess().getBaseNavigationBaseParserRuleCall_0_0()); }
		ruleNavigationBase
		{ after(grammarAccess.getNavigationExpressionAccess().getBaseNavigationBaseParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__FeaturesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationExpressionAccess().getFeaturesFeatureParserRuleCall_1_1_0()); }
		ruleFeature
		{ after(grammarAccess.getNavigationExpressionAccess().getFeaturesFeatureParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationExpression__CastAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationExpressionAccess().getCastNavigationBaseParserRuleCall_2_1_0()); }
		ruleNavigationBase
		{ after(grammarAccess.getNavigationExpressionAccess().getCastNavigationBaseParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DATE : '{' ('0'..'9'|'-')+ '}';

RULE_TIMESTAMP : '{' ('0'..'9'|'-')+ 'T' ( options {greedy=false;} : . )*'}';

RULE_DECIMAL : RULE_INTEGER '.' RULE_INTEGER;

RULE_INTEGER : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
