/*
 * generated by Xtext 2.18.0.M3
 */
package hu.blackbelt.judo.meta.jql.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import hu.blackbelt.judo.meta.jql.ide.contentassist.antlr.internal.InternalJqlDslParser;
import hu.blackbelt.judo.meta.jql.services.JqlDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class JqlDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(JqlDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, JqlDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getOpOrAccess().getAlternatives(), "rule__OpOr__Alternatives");
			builder.put(grammarAccess.getOpAndAccess().getAlternatives(), "rule__OpAnd__Alternatives");
			builder.put(grammarAccess.getOpEqualityAccess().getAlternatives(), "rule__OpEquality__Alternatives");
			builder.put(grammarAccess.getOpCompareAccess().getAlternatives(), "rule__OpCompare__Alternatives");
			builder.put(grammarAccess.getOpAddAccess().getAlternatives(), "rule__OpAdd__Alternatives");
			builder.put(grammarAccess.getOpMultiAccess().getAlternatives(), "rule__OpMulti__Alternatives");
			builder.put(grammarAccess.getUnaryOperationAccess().getAlternatives(), "rule__UnaryOperation__Alternatives");
			builder.put(grammarAccess.getOpUnaryAccess().getAlternatives(), "rule__OpUnary__Alternatives");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getFunctionAccess().getAlternatives_2_1(), "rule__Function__Alternatives_2_1");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getBooleanLiteralAccess().getAlternatives_1(), "rule__BooleanLiteral__Alternatives_1");
			builder.put(grammarAccess.getNumberLiteralAccess().getAlternatives(), "rule__NumberLiteral__Alternatives");
			builder.put(grammarAccess.getTemporalLiteralAccess().getAlternatives(), "rule__TemporalLiteral__Alternatives");
			builder.put(grammarAccess.getNavigationBaseAccess().getAlternatives(), "rule__NavigationBase__Alternatives");
			builder.put(grammarAccess.getConcatenateExpressionAccess().getGroup(), "rule__ConcatenateExpression__Group__0");
			builder.put(grammarAccess.getConcatenateExpressionAccess().getGroup_1(), "rule__ConcatenateExpression__Group_1__0");
			builder.put(grammarAccess.getConcatenateExpressionAccess().getGroup_1_0(), "rule__ConcatenateExpression__Group_1_0__0");
			builder.put(grammarAccess.getConcatenateExpressionAccess().getGroup_1_0_0(), "rule__ConcatenateExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1_0(), "rule__OrExpression__Group_1_0__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1_0_0(), "rule__OrExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1_0(), "rule__AndExpression__Group_1_0__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1_0_0(), "rule__AndExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup_1(), "rule__EqualityExpression__Group_1__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup_1_0(), "rule__EqualityExpression__Group_1_0__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup_1_0_0(), "rule__EqualityExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup_1_0(), "rule__RelationalExpression__Group_1_0__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0(), "rule__RelationalExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getOpCompareAccess().getGroup_1(), "rule__OpCompare__Group_1__0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0(), "rule__AdditiveExpression__Group_1_0__0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_0(), "rule__AdditiveExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2(), "rule__MultiplicativeExpression__Group_2__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_0(), "rule__MultiplicativeExpression__Group_2_0__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_0_0(), "rule__MultiplicativeExpression__Group_2_0_0__0");
			builder.put(grammarAccess.getUnaryOperationAccess().getGroup_0(), "rule__UnaryOperation__Group_0__0");
			builder.put(grammarAccess.getParenthesizedExpressionAccess().getGroup(), "rule__ParenthesizedExpression__Group__0");
			builder.put(grammarAccess.getLambdaExpressionAccess().getGroup(), "rule__LambdaExpression__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_2(), "rule__Function__Group_2__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_2_1_1(), "rule__Function__Group_2_1_1__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_2_1_1_1(), "rule__Function__Group_2_1_1_1__0");
			builder.put(grammarAccess.getBooleanLiteralAccess().getGroup(), "rule__BooleanLiteral__Group__0");
			builder.put(grammarAccess.getNumberLiteralAccess().getGroup_0(), "rule__NumberLiteral__Group_0__0");
			builder.put(grammarAccess.getNumberLiteralAccess().getGroup_1(), "rule__NumberLiteral__Group_1__0");
			builder.put(grammarAccess.getStringLiteralAccess().getGroup(), "rule__StringLiteral__Group__0");
			builder.put(grammarAccess.getTemporalLiteralAccess().getGroup_0(), "rule__TemporalLiteral__Group_0__0");
			builder.put(grammarAccess.getTemporalLiteralAccess().getGroup_1(), "rule__TemporalLiteral__Group_1__0");
			builder.put(grammarAccess.getMeasuredLiteralAccess().getGroup(), "rule__MeasuredLiteral__Group__0");
			builder.put(grammarAccess.getEnumLiteralAccess().getGroup(), "rule__EnumLiteral__Group__0");
			builder.put(grammarAccess.getNavigationExpressionAccess().getGroup(), "rule__NavigationExpression__Group__0");
			builder.put(grammarAccess.getNavigationExpressionAccess().getGroup_1(), "rule__NavigationExpression__Group_1__0");
			builder.put(grammarAccess.getNavigationExpressionAccess().getGroup_2(), "rule__NavigationExpression__Group_2__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getConcatenateExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__ConcatenateExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getConcatenateExpressionAccess().getRightOperandAssignment_1_1(), "rule__ConcatenateExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__OrExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getOrExpressionAccess().getRightOperandAssignment_1_1(), "rule__OrExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__AndExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getAndExpressionAccess().getRightOperandAssignment_1_1(), "rule__AndExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__EqualityExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getEqualityExpressionAccess().getRightOperandAssignment_1_1(), "rule__EqualityExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__RelationalExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getRelationalExpressionAccess().getRightOperandAssignment_1_1(), "rule__RelationalExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__AdditiveExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getRightOperandAssignment_1_1(), "rule__AdditiveExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getFunctionsAssignment_1_1(), "rule__MultiplicativeExpression__FunctionsAssignment_1_1");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_2_0_0_1(), "rule__MultiplicativeExpression__OperatorAssignment_2_0_0_1");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandAssignment_2_1(), "rule__MultiplicativeExpression__RightOperandAssignment_2_1");
			builder.put(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0_1(), "rule__UnaryOperation__OperatorAssignment_0_1");
			builder.put(grammarAccess.getUnaryOperationAccess().getOperandAssignment_0_2(), "rule__UnaryOperation__OperandAssignment_0_2");
			builder.put(grammarAccess.getLambdaExpressionAccess().getArgumentAssignment_1(), "rule__LambdaExpression__ArgumentAssignment_1");
			builder.put(grammarAccess.getLambdaExpressionAccess().getStatementAssignment_3(), "rule__LambdaExpression__StatementAssignment_3");
			builder.put(grammarAccess.getFunctionAccess().getFeatureAssignment_1(), "rule__Function__FeatureAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getLambdaAssignment_2_1_0(), "rule__Function__LambdaAssignment_2_1_0");
			builder.put(grammarAccess.getFunctionAccess().getParametersAssignment_2_1_1_0(), "rule__Function__ParametersAssignment_2_1_1_0");
			builder.put(grammarAccess.getFunctionAccess().getParametersAssignment_2_1_1_1_1(), "rule__Function__ParametersAssignment_2_1_1_1_1");
			builder.put(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1(), "rule__BooleanLiteral__IsTrueAssignment_1_1");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment_0_1(), "rule__NumberLiteral__ValueAssignment_0_1");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment_1_1(), "rule__NumberLiteral__ValueAssignment_1_1");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment_1(), "rule__StringLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getTemporalLiteralAccess().getValueAssignment_0_1(), "rule__TemporalLiteral__ValueAssignment_0_1");
			builder.put(grammarAccess.getTemporalLiteralAccess().getValueAssignment_1_1(), "rule__TemporalLiteral__ValueAssignment_1_1");
			builder.put(grammarAccess.getMeasuredLiteralAccess().getValueAssignment_1(), "rule__MeasuredLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getMeasuredLiteralAccess().getMeasureAssignment_3(), "rule__MeasuredLiteral__MeasureAssignment_3");
			builder.put(grammarAccess.getEnumLiteralAccess().getValueAssignment_2(), "rule__EnumLiteral__ValueAssignment_2");
			builder.put(grammarAccess.getNavigationExpressionAccess().getBaseAssignment_0(), "rule__NavigationExpression__BaseAssignment_0");
			builder.put(grammarAccess.getNavigationExpressionAccess().getFeaturesAssignment_1_1(), "rule__NavigationExpression__FeaturesAssignment_1_1");
			builder.put(grammarAccess.getNavigationExpressionAccess().getCastAssignment_2_1(), "rule__NavigationExpression__CastAssignment_2_1");
			builder.put(grammarAccess.getFeatureAccess().getNameAssignment(), "rule__Feature__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private JqlDslGrammarAccess grammarAccess;

	@Override
	protected InternalJqlDslParser createParser() {
		InternalJqlDslParser result = new InternalJqlDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public JqlDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JqlDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
